@using Evolution.Web.Models

<input @bind-value="@newAnimalName"
       placeholder="Enter new animal name"
       class="border border-gray-400 p-2 rounded-lg" />
<Button @onclick="@(e => CreateNewAnimal())"
        class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded">
    new Animal
</Button>
<Button @onclick="@(e => CreateNewPlant())"
        class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded">
    new Plant
</Button>

<Button @onclick="@(e => AutoAct())"
        class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded">
    Run on Timer
</Button>

@if (WorldStore.IsLoading)
{
    <div> Loading... </div>
}
else
{
    @for (var r = 0; r < WorldStore.WorldSize.Height; r++)
    {
        <div name="row-@r" class="flex items-center">
            @for (var c = 0; c < WorldStore.WorldSize.Width; c++)
            {
                <div name="col-@c" class="flex items-center">
                    <div  name="cell-@r-@c" class="border-2 border-gray-50 rounded-sm @(!WorldStore.GetAnimalsAt(r, c).Any() ? "bg-gray-100" : "")" style="width: 100px; height: 100px;">
                        ( @r , @c )

                        @foreach (var animal in WorldStore.GetAnimalsAt(r, c))
                        {
                            <AnimalComponent Animal="@animal" OnActed="@ReloadAnimals"></AnimalComponent>
                        }

                        @foreach (var plant in WorldStore.GetPlantsAt(r, c))
                        {
                            <PlantComponent Plant="@plant" OnActed="@ReloadPlants"></PlantComponent>
                        }

                    </div>
                </div>
            }
        </div>
    }
}
